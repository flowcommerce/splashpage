/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.6
 * apidoc:0.11.1 http://www.apidoc.me/flow/common/0.0.6/anorm_2_x_parsers
 */
import anorm._

package io.flow.common.v0.anorm.parsers {

  import io.flow.common.v0.anorm.conversions.Json._
  import io.flow.common.v0.anorm.conversions.Json.Local._

  object Calendar {

    case class Mappings(value: String)

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        value = s"${prefix}${sep}value"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.Calendar] = {
      SqlParser.str(mappings.value) map {
        case value => io.flow.common.v0.models.Calendar(value)
      }
    }

  }
  object Capability {

    case class Mappings(value: String)

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        value = s"${prefix}${sep}value"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.Capability] = {
      SqlParser.str(mappings.value) map {
        case value => io.flow.common.v0.models.Capability(value)
      }
    }

  }
  object ChangeType {

    case class Mappings(value: String)

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        value = s"${prefix}${sep}value"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.ChangeType] = {
      SqlParser.str(mappings.value) map {
        case value => io.flow.common.v0.models.ChangeType(value)
      }
    }

  }
  object Country {

    case class Mappings(value: String)

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        value = s"${prefix}${sep}value"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.Country] = {
      SqlParser.str(mappings.value) map {
        case value => io.flow.common.v0.models.Country(value)
      }
    }

  }
  object ScheduleExceptionStatus {

    case class Mappings(value: String)

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        value = s"${prefix}${sep}value"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.ScheduleExceptionStatus] = {
      SqlParser.str(mappings.value) map {
        case value => io.flow.common.v0.models.ScheduleExceptionStatus(value)
      }
    }

  }
  object UnitOfMeasurement {

    case class Mappings(value: String)

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        value = s"${prefix}${sep}value"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.UnitOfMeasurement] = {
      SqlParser.str(mappings.value) map {
        case value => io.flow.common.v0.models.UnitOfMeasurement(value)
      }
    }

  }
  object UnitOfTime {

    case class Mappings(value: String)

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        value = s"${prefix}${sep}value"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.UnitOfTime] = {
      SqlParser.str(mappings.value) map {
        case value => io.flow.common.v0.models.UnitOfTime(value)
      }
    }

  }
  object ValueAddedService {

    case class Mappings(value: String)

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        value = s"${prefix}${sep}value"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.ValueAddedService] = {
      SqlParser.str(mappings.value) map {
        case value => io.flow.common.v0.models.ValueAddedService(value)
      }
    }

  }
  object Visibility {

    case class Mappings(value: String)

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        value = s"${prefix}${sep}value"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.Visibility] = {
      SqlParser.str(mappings.value) map {
        case value => io.flow.common.v0.models.Visibility(value)
      }
    }

  }
  object Address {

    case class Mappings(
      text: String = "text",
      streets: String = "streets",
      city: String = "city",
      province: String = "province",
      postalCode: String = "postal_code",
      country: String = "country"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        text = s"${prefix}${sep}text",
        streets = s"${prefix}${sep}streets",
        city = s"${prefix}${sep}city",
        province = s"${prefix}${sep}province",
        postalCode = s"${prefix}${sep}postal_code",
        country = s"${prefix}${sep}country"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.Address] = {
      SqlParser.str(mappings.text).? ~
      SqlParser.get[Seq[String]](mappings.streets).? ~
      SqlParser.str(mappings.city).? ~
      SqlParser.str(mappings.province).? ~
      SqlParser.str(mappings.postalCode).? ~
      io.flow.common.v0.anorm.parsers.Country.parser(io.flow.common.v0.anorm.parsers.Country.Mappings(mappings.country)).? map {
        case text ~ streets ~ city ~ province ~ postalCode ~ country => {
          io.flow.common.v0.models.Address(
            text = text,
            streets = streets,
            city = city,
            province = province,
            postalCode = postalCode,
            country = country
          )
        }
      }
    }

  }

  object ChangeHeader {

    case class Mappings(
      id: String = "id",
      timestamp: String = "timestamp",
      `type`: String = "type"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        id = s"${prefix}${sep}id",
        timestamp = s"${prefix}${sep}timestamp",
        `type` = s"${prefix}${sep}type"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.ChangeHeader] = {
      SqlParser.str(mappings.id) ~
      SqlParser.get[_root_.org.joda.time.DateTime](mappings.timestamp) ~
      io.flow.common.v0.anorm.parsers.ChangeType.parser(io.flow.common.v0.anorm.parsers.ChangeType.Mappings(mappings.`type`)) map {
        case id ~ timestamp ~ typeInstance => {
          io.flow.common.v0.models.ChangeHeader(
            id = id,
            timestamp = timestamp,
            `type` = typeInstance
          )
        }
      }
    }

  }

  object DatetimeRange {

    case class Mappings(
      from: String = "from",
      to: String = "to"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        from = s"${prefix}${sep}from",
        to = s"${prefix}${sep}to"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.DatetimeRange] = {
      SqlParser.get[_root_.org.joda.time.DateTime](mappings.from) ~
      SqlParser.get[_root_.org.joda.time.DateTime](mappings.to) map {
        case from ~ to => {
          io.flow.common.v0.models.DatetimeRange(
            from = from,
            to = to
          )
        }
      }
    }

  }

  object Dimension {

    case class Mappings(
      value: String = "value",
      units: String = "units"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        value = s"${prefix}${sep}value",
        units = s"${prefix}${sep}units"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.Dimension] = {
      SqlParser.get[Double](mappings.value) ~
      io.flow.common.v0.anorm.parsers.UnitOfMeasurement.parser(io.flow.common.v0.anorm.parsers.UnitOfMeasurement.Mappings(mappings.units)) map {
        case value ~ units => {
          io.flow.common.v0.models.Dimension(
            value = value,
            units = units
          )
        }
      }
    }

  }

  object Error {

    case class Mappings(
      code: String = "code",
      message: String = "message"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        code = s"${prefix}${sep}code",
        message = s"${prefix}${sep}message"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.Error] = {
      SqlParser.str(mappings.code) ~
      SqlParser.str(mappings.message) map {
        case code ~ message => {
          io.flow.common.v0.models.Error(
            code = code,
            message = message
          )
        }
      }
    }

  }

  object Healthcheck {

    case class Mappings(
      status: String = "status"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        status = s"${prefix}${sep}status"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.Healthcheck] = {
      SqlParser.str(mappings.status) map {
        case status => {
          io.flow.common.v0.models.Healthcheck(
            status = status
          )
        }
      }
    }

  }

  object Location {

    case class Mappings(
      value: String = "value"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        value = s"${prefix}${sep}value"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.Location] = {
      SqlParser.str(mappings.value) map {
        case value => {
          io.flow.common.v0.models.Location(
            value = value
          )
        }
      }
    }

  }

  object Name {

    case class Mappings(
      first: String = "first",
      last: String = "last"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        first = s"${prefix}${sep}first",
        last = s"${prefix}${sep}last"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.Name] = {
      SqlParser.str(mappings.first).? ~
      SqlParser.str(mappings.last).? map {
        case first ~ last => {
          io.flow.common.v0.models.Name(
            first = first,
            last = last
          )
        }
      }
    }

  }

  object Organization {

    case class Mappings(
      id: String = "id",
      name: String = "name"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        id = s"${prefix}${sep}id",
        name = s"${prefix}${sep}name"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.Organization] = {
      SqlParser.str(mappings.id) ~
      SqlParser.str(mappings.name) map {
        case id ~ name => {
          io.flow.common.v0.models.Organization(
            id = id,
            name = name
          )
        }
      }
    }

  }

  object OrganizationReference {

    case class Mappings(
      id: String = "id"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        id = s"${prefix}${sep}id"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.OrganizationReference] = {
      SqlParser.str(mappings.id) map {
        case id => {
          io.flow.common.v0.models.OrganizationReference(
            id = id
          )
        }
      }
    }

  }

  object OrganizationSummary {

    case class Mappings(
      id: String = "id",
      name: String = "name"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        id = s"${prefix}${sep}id",
        name = s"${prefix}${sep}name"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.OrganizationSummary] = {
      SqlParser.str(mappings.id) ~
      SqlParser.str(mappings.name) map {
        case id ~ name => {
          io.flow.common.v0.models.OrganizationSummary(
            id = id,
            name = name
          )
        }
      }
    }

  }

  object Price {

    case class Mappings(
      amount: String = "amount",
      currency: String = "currency"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        amount = s"${prefix}${sep}amount",
        currency = s"${prefix}${sep}currency"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.Price] = {
      SqlParser.str(mappings.amount) ~
      SqlParser.str(mappings.currency) map {
        case amount ~ currency => {
          io.flow.common.v0.models.Price(
            amount = amount,
            currency = currency
          )
        }
      }
    }

  }

  object User {

    case class Mappings(
      id: String = "id",
      email: String = "email",
      name: io.flow.common.v0.anorm.parsers.Name.Mappings
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        id = s"${prefix}${sep}id",
        email = s"${prefix}${sep}email",
        name = io.flow.common.v0.anorm.parsers.Name.Mappings.prefix(Seq(prefix, "name").filter(!_.isEmpty).mkString("_"), "_")
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.User] = {
      SqlParser.str(mappings.id) ~
      SqlParser.str(mappings.email).? ~
      io.flow.common.v0.anorm.parsers.Name.parser(mappings.name) map {
        case id ~ email ~ name => {
          io.flow.common.v0.models.User(
            id = id,
            email = email,
            name = name
          )
        }
      }
    }

  }

  object UserReference {

    case class Mappings(
      id: String = "id"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        id = s"${prefix}${sep}id"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.UserReference] = {
      SqlParser.str(mappings.id) map {
        case id => {
          io.flow.common.v0.models.UserReference(
            id = id
          )
        }
      }
    }

  }

  object UserSummary {

    case class Mappings(
      id: String = "id",
      name: String = "name"
    )

    object Mappings {

      val base = prefix("", "")

      def table(table: String) = prefix(table, ".")

      def prefix(prefix: String, sep: String) = Mappings(
        id = s"${prefix}${sep}id",
        name = s"${prefix}${sep}name"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table, "."))

    def parser(mappings: Mappings): RowParser[io.flow.common.v0.models.UserSummary] = {
      SqlParser.str(mappings.id) ~
      SqlParser.str(mappings.name) map {
        case id ~ name => {
          io.flow.common.v0.models.UserSummary(
            id = id,
            name = name
          )
        }
      }
    }

  }

}