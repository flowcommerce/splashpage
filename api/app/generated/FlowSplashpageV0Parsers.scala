/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.1.31
 * apidoc:0.11.32 http://www.apidoc.me/flow/splashpage/0.1.31/anorm_2_x_parsers
 */
import anorm._

package io.flow.splashpage.v0.anorm.parsers {

  import io.flow.splashpage.v0.anorm.conversions.Standard._

  import io.flow.splashpage.v0.anorm.conversions.Types._

  object Publication {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(s"$prefix${sep}name")

    def parser(name: String = "publication"): RowParser[io.flow.splashpage.v0.models.Publication] = {
      SqlParser.str(name) map {
        case value => io.flow.splashpage.v0.models.Publication(value)
      }
    }

  }

  object Geo {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      country = s"$prefix${sep}country",
      ipAddress = s"$prefix${sep}ip_address"
    )

    def parser(
      country: String = "country",
      ipAddress: String = "ip_address"
    ): RowParser[io.flow.splashpage.v0.models.Geo] = {
      SqlParser.str(country).? ~
      SqlParser.str(ipAddress).? map {
        case country ~ ipAddress => {
          io.flow.splashpage.v0.models.Geo(
            country = country,
            ipAddress = ipAddress
          )
        }
      }
    }

  }

  object GeoForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      country = s"$prefix${sep}country",
      ipAddress = s"$prefix${sep}ip_address"
    )

    def parser(
      country: String = "country",
      ipAddress: String = "ip_address"
    ): RowParser[io.flow.splashpage.v0.models.GeoForm] = {
      SqlParser.str(country).? ~
      SqlParser.str(ipAddress).? map {
        case country ~ ipAddress => {
          io.flow.splashpage.v0.models.GeoForm(
            country = country,
            ipAddress = ipAddress
          )
        }
      }
    }

  }

  object Subscription {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      email = s"$prefix${sep}email",
      publication = s"$prefix${sep}publication",
      geoPrefix = s"$prefix${sep}geo"
    )

    def parser(
      id: String = "id",
      email: String = "email",
      publication: String = "publication",
      geoPrefix: String = "geo"
    ): RowParser[io.flow.splashpage.v0.models.Subscription] = {
      SqlParser.str(id) ~
      SqlParser.str(email) ~
      io.flow.splashpage.v0.anorm.parsers.Publication.parser(publication) ~
      io.flow.splashpage.v0.anorm.parsers.Geo.parserWithPrefix(geoPrefix) map {
        case id ~ email ~ publication ~ geo => {
          io.flow.splashpage.v0.models.Subscription(
            id = id,
            email = email,
            publication = publication,
            geo = geo
          )
        }
      }
    }

  }

  object SubscriptionForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      email = s"$prefix${sep}email",
      publication = s"$prefix${sep}publication",
      geoPrefix = s"$prefix${sep}geo"
    )

    def parser(
      email: String = "email",
      publication: String = "publication",
      geoPrefix: String = "geo"
    ): RowParser[io.flow.splashpage.v0.models.SubscriptionForm] = {
      SqlParser.str(email) ~
      io.flow.splashpage.v0.anorm.parsers.Publication.parser(publication) ~
      io.flow.splashpage.v0.anorm.parsers.GeoForm.parserWithPrefix(geoPrefix).? map {
        case email ~ publication ~ geo => {
          io.flow.splashpage.v0.models.SubscriptionForm(
            email = email,
            publication = publication,
            geo = geo
          )
        }
      }
    }

  }

}