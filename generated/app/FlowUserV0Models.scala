/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1-ev
 * apidoc:0.9.43 http://www.apidoc.me/flow/user/0.0.1-ev/play_2_x_json
 */
package io.flow.user.v0.models {

  case class Name(
    first: _root_.scala.Option[String] = None,
    last: _root_.scala.Option[String] = None
  )

  /**
   * Represents a single user in the system
   */
  case class User(
    guid: _root_.java.util.UUID,
    email: _root_.scala.Option[String] = None,
    name: _root_.scala.Option[io.flow.user.v0.models.Name] = None,
    audit: io.flow.common.v0.models.Audit
  )

  case class UserForm(
    email: _root_.scala.Option[String] = None,
    name: _root_.scala.Option[io.flow.user.v0.models.Name] = None
  )

}

package io.flow.user.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.user.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsUserName: play.api.libs.json.Reads[Name] = {
      (
        (__ \ "first").readNullable[String] and
        (__ \ "last").readNullable[String]
      )(Name.apply _)
    }

    implicit def jsonWritesUserName: play.api.libs.json.Writes[Name] = {
      (
        (__ \ "first").writeNullable[String] and
        (__ \ "last").writeNullable[String]
      )(unlift(Name.unapply _))
    }

    implicit def jsonReadsUserUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "email").readNullable[String] and
        (__ \ "name").readNullable[io.flow.user.v0.models.Name] and
        (__ \ "audit").read[io.flow.common.v0.models.Audit]
      )(User.apply _)
    }

    implicit def jsonWritesUserUser: play.api.libs.json.Writes[User] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "email").writeNullable[String] and
        (__ \ "name").writeNullable[io.flow.user.v0.models.Name] and
        (__ \ "audit").write[io.flow.common.v0.models.Audit]
      )(unlift(User.unapply _))
    }

    implicit def jsonReadsUserUserForm: play.api.libs.json.Reads[UserForm] = {
      (
        (__ \ "email").readNullable[String] and
        (__ \ "name").readNullable[io.flow.user.v0.models.Name]
      )(UserForm.apply _)
    }

    implicit def jsonWritesUserUserForm: play.api.libs.json.Writes[UserForm] = {
      (
        (__ \ "email").writeNullable[String] and
        (__ \ "name").writeNullable[io.flow.user.v0.models.Name]
      )(unlift(UserForm.unapply _))
    }
  }
}

package io.flow.user.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.user.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}
