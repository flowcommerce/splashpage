/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.3-dev
 * apidoc:0.9.48 http://www.apidoc.me/flow/user/0.0.3-dev/play_2_x_json
 */
package io.flow.user.v0.models {

  case class Name(
    first: _root_.scala.Option[String] = None,
    last: _root_.scala.Option[String] = None
  )

  case class NameForm(
    first: _root_.scala.Option[String] = None,
    last: _root_.scala.Option[String] = None
  )

  /**
   * Represents a single user in the system
   */
  case class User(
    id: String,
    email: _root_.scala.Option[String] = None,
    name: io.flow.user.v0.models.Name
  )

  case class UserForm(
    email: _root_.scala.Option[String] = None,
    name: _root_.scala.Option[io.flow.user.v0.models.NameForm] = None,
    avatarUrl: _root_.scala.Option[String] = None
  )

  case class UserVersion(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType,
    user: io.flow.user.v0.models.User
  )

  sealed trait System

  object System {

    case object Github extends System { override def toString = "github" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends System

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Github)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): System = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[System] = byName.get(value.toLowerCase)

  }

}

package io.flow.user.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.user.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsUserSystem = __.read[String].map(System.apply)
    implicit val jsonWritesUserSystem = new Writes[System] {
      def writes(x: System) = JsString(x.toString)
    }

    implicit def jsonReadsUserName: play.api.libs.json.Reads[Name] = {
      (
        (__ \ "first").readNullable[String] and
        (__ \ "last").readNullable[String]
      )(Name.apply _)
    }

    implicit def jsonWritesUserName: play.api.libs.json.Writes[Name] = {
      (
        (__ \ "first").writeNullable[String] and
        (__ \ "last").writeNullable[String]
      )(unlift(Name.unapply _))
    }

    implicit def jsonReadsUserNameForm: play.api.libs.json.Reads[NameForm] = {
      (
        (__ \ "first").readNullable[String] and
        (__ \ "last").readNullable[String]
      )(NameForm.apply _)
    }

    implicit def jsonWritesUserNameForm: play.api.libs.json.Writes[NameForm] = {
      (
        (__ \ "first").writeNullable[String] and
        (__ \ "last").writeNullable[String]
      )(unlift(NameForm.unapply _))
    }

    implicit def jsonReadsUserUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "id").read[String] and
        (__ \ "email").readNullable[String] and
        (__ \ "name").read[io.flow.user.v0.models.Name]
      )(User.apply _)
    }

    implicit def jsonWritesUserUser: play.api.libs.json.Writes[User] = {
      (
        (__ \ "id").write[String] and
        (__ \ "email").writeNullable[String] and
        (__ \ "name").write[io.flow.user.v0.models.Name]
      )(unlift(User.unapply _))
    }

    implicit def jsonReadsUserUserForm: play.api.libs.json.Reads[UserForm] = {
      (
        (__ \ "email").readNullable[String] and
        (__ \ "name").readNullable[io.flow.user.v0.models.NameForm] and
        (__ \ "avatar_url").readNullable[String]
      )(UserForm.apply _)
    }

    implicit def jsonWritesUserUserForm: play.api.libs.json.Writes[UserForm] = {
      (
        (__ \ "email").writeNullable[String] and
        (__ \ "name").writeNullable[io.flow.user.v0.models.NameForm] and
        (__ \ "avatar_url").writeNullable[String]
      )(unlift(UserForm.unapply _))
    }

    implicit def jsonReadsUserUserVersion: play.api.libs.json.Reads[UserVersion] = {
      (
        (__ \ "id").read[String] and
        (__ \ "timestamp").read[_root_.org.joda.time.DateTime] and
        (__ \ "type").read[io.flow.common.v0.models.ChangeType] and
        (__ \ "user").read[io.flow.user.v0.models.User]
      )(UserVersion.apply _)
    }

    implicit def jsonWritesUserUserVersion: play.api.libs.json.Writes[UserVersion] = {
      (
        (__ \ "id").write[String] and
        (__ \ "timestamp").write[_root_.org.joda.time.DateTime] and
        (__ \ "type").write[io.flow.common.v0.models.ChangeType] and
        (__ \ "user").write[io.flow.user.v0.models.User]
      )(unlift(UserVersion.unapply _))
    }
  }
}

package io.flow.user.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.user.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: System
    private[this] val enumSystemNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.user.v0.models.System.all.mkString(", ")}"

    implicit val pathBindableEnumSystem = new PathBindable.Parsing[io.flow.user.v0.models.System] (
      System.fromString(_).get, _.toString, enumSystemNotFound
    )

    implicit val queryStringBindableEnumSystem = new QueryStringBindable.Parsing[io.flow.user.v0.models.System](
      System.fromString(_).get, _.toString, enumSystemNotFound
    )

  }

}
