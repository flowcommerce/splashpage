/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.3
 * apidoc:0.9.48 http://www.apidoc.me/flow/splashpage/0.0.3/play_2_4_client
 */
package io.flow.splashpage.v0.models {

  case class Geo(
    ipAddress: _root_.scala.Option[String] = None,
    latitude: _root_.scala.Option[String] = None,
    longitude: _root_.scala.Option[String] = None
  )

  case class GeoForm(
    ipAddress: _root_.scala.Option[String] = None,
    latitude: _root_.scala.Option[String] = None,
    longitude: _root_.scala.Option[String] = None
  )

  /**
   * Represents an email address that is currently subscribed to a publication
   */
  case class Subscription(
    id: String,
    email: String,
    publication: io.flow.splashpage.v0.models.Publication,
    geo: io.flow.splashpage.v0.models.Geo
  )

  case class SubscriptionForm(
    email: String,
    publication: io.flow.splashpage.v0.models.Publication,
    geo: _root_.scala.Option[io.flow.splashpage.v0.models.GeoForm] = None
  )

  /**
   * A publication represents something that a user can subscribe to. An example
   * would be subscribing to notification when we launch the business
   */
  sealed trait Publication

  object Publication {

    /**
     * Email me when flow launches
     */
    case object Launch extends Publication { override def toString = "launch" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Publication

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Launch)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Publication = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Publication] = byName.get(value.toLowerCase)

  }

}

package io.flow.splashpage.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.splashpage.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsSplashpagePublication = __.read[String].map(Publication.apply)
    implicit val jsonWritesSplashpagePublication = new Writes[Publication] {
      def writes(x: Publication) = JsString(x.toString)
    }

    implicit def jsonReadsSplashpageGeo: play.api.libs.json.Reads[Geo] = {
      (
        (__ \ "ip_address").readNullable[String] and
        (__ \ "latitude").readNullable[String] and
        (__ \ "longitude").readNullable[String]
      )(Geo.apply _)
    }

    implicit def jsonWritesSplashpageGeo: play.api.libs.json.Writes[Geo] = {
      (
        (__ \ "ip_address").writeNullable[String] and
        (__ \ "latitude").writeNullable[String] and
        (__ \ "longitude").writeNullable[String]
      )(unlift(Geo.unapply _))
    }

    implicit def jsonReadsSplashpageGeoForm: play.api.libs.json.Reads[GeoForm] = {
      (
        (__ \ "ip_address").readNullable[String] and
        (__ \ "latitude").readNullable[String] and
        (__ \ "longitude").readNullable[String]
      )(GeoForm.apply _)
    }

    implicit def jsonWritesSplashpageGeoForm: play.api.libs.json.Writes[GeoForm] = {
      (
        (__ \ "ip_address").writeNullable[String] and
        (__ \ "latitude").writeNullable[String] and
        (__ \ "longitude").writeNullable[String]
      )(unlift(GeoForm.unapply _))
    }

    implicit def jsonReadsSplashpageSubscription: play.api.libs.json.Reads[Subscription] = {
      (
        (__ \ "id").read[String] and
        (__ \ "email").read[String] and
        (__ \ "publication").read[io.flow.splashpage.v0.models.Publication] and
        (__ \ "geo").read[io.flow.splashpage.v0.models.Geo]
      )(Subscription.apply _)
    }

    implicit def jsonWritesSplashpageSubscription: play.api.libs.json.Writes[Subscription] = {
      (
        (__ \ "id").write[String] and
        (__ \ "email").write[String] and
        (__ \ "publication").write[io.flow.splashpage.v0.models.Publication] and
        (__ \ "geo").write[io.flow.splashpage.v0.models.Geo]
      )(unlift(Subscription.unapply _))
    }

    implicit def jsonReadsSplashpageSubscriptionForm: play.api.libs.json.Reads[SubscriptionForm] = {
      (
        (__ \ "email").read[String] and
        (__ \ "publication").read[io.flow.splashpage.v0.models.Publication] and
        (__ \ "geo").readNullable[io.flow.splashpage.v0.models.GeoForm]
      )(SubscriptionForm.apply _)
    }

    implicit def jsonWritesSplashpageSubscriptionForm: play.api.libs.json.Writes[SubscriptionForm] = {
      (
        (__ \ "email").write[String] and
        (__ \ "publication").write[io.flow.splashpage.v0.models.Publication] and
        (__ \ "geo").writeNullable[io.flow.splashpage.v0.models.GeoForm]
      )(unlift(SubscriptionForm.unapply _))
    }
  }
}

package io.flow.splashpage.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.splashpage.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: Publication
    private[this] val enumPublicationNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.splashpage.v0.models.Publication.all.mkString(", ")}"

    implicit val pathBindableEnumPublication = new PathBindable.Parsing[io.flow.splashpage.v0.models.Publication] (
      Publication.fromString(_).get, _.toString, enumPublicationNotFound
    )

    implicit val queryStringBindableEnumPublication = new QueryStringBindable.Parsing[io.flow.splashpage.v0.models.Publication](
      Publication.fromString(_).get, _.toString, enumPublicationNotFound
    )

  }

}


package io.flow.splashpage.v0 {

  object Constants {

    val UserAgent = "apidoc:0.9.48 http://www.apidoc.me/flow/splashpage/0.0.3/play_2_4_client"
    val Version = "0.0.3"
    val VersionMajor = 0

  }

  class Client(
    apiUrl: String,
    auth: scala.Option[io.flow.splashpage.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) {
    import io.flow.common.v0.models.json._
    import io.flow.splashpage.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.splashpage.v0.Client")

    logger.info(s"Initializing io.flow.splashpage.v0.Client for url $apiUrl")

    def healthchecks: Healthchecks = Healthchecks

    def subscriptions: Subscriptions = Subscriptions

    object Healthchecks extends Healthchecks {
      override def getInternalAndHealthcheck()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Healthcheck] = {
        _executeRequest("GET", s"/_internal_/healthcheck").map {
          case r if r.status == 200 => _root_.io.flow.splashpage.v0.Client.parseJson("io.flow.common.v0.models.Healthcheck", r, _.validate[io.flow.common.v0.models.Healthcheck])
          case r => throw new io.flow.splashpage.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Subscriptions extends Subscriptions {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        email: _root_.scala.Option[String] = None,
        publication: _root_.scala.Option[io.flow.splashpage.v0.models.Publication] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "created_at"
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.splashpage.v0.models.Subscription]] = {
        val queryParameters = Seq(
          email.map("email" -> _),
          publication.map("publication" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/subscriptions", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.splashpage.v0.Client.parseJson("Seq[io.flow.splashpage.v0.models.Subscription]", r, _.validate[Seq[io.flow.splashpage.v0.models.Subscription]])
          case r if r.status == 401 => throw new io.flow.splashpage.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.splashpage.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.splashpage.v0.models.Subscription] = {
        _executeRequest("GET", s"/subscriptions/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 200 => _root_.io.flow.splashpage.v0.Client.parseJson("io.flow.splashpage.v0.models.Subscription", r, _.validate[io.flow.splashpage.v0.models.Subscription])
          case r if r.status == 401 => throw new io.flow.splashpage.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.splashpage.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.splashpage.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        subscriptionForm: io.flow.splashpage.v0.models.SubscriptionForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.splashpage.v0.models.Subscription] = {
        val payload = play.api.libs.json.Json.toJson(subscriptionForm)

        _executeRequest("POST", s"/subscriptions", body = Some(payload)).map {
          case r if r.status == 200 => _root_.io.flow.splashpage.v0.Client.parseJson("io.flow.splashpage.v0.models.Subscription", r, _.validate[io.flow.splashpage.v0.models.Subscription])
          case r if r.status == 201 => _root_.io.flow.splashpage.v0.Client.parseJson("io.flow.splashpage.v0.models.Subscription", r, _.validate[io.flow.splashpage.v0.models.Subscription])
          case r if r.status == 422 => throw new io.flow.splashpage.v0.errors.ErrorsResponse(r)
          case r => throw new io.flow.splashpage.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 422")
        }
      }

      override def deleteById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/subscriptions/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new io.flow.splashpage.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.splashpage.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.splashpage.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(apiUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new io.flow.splashpage.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  trait Healthchecks {
    def getInternalAndHealthcheck()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Healthcheck]
  }

  trait Subscriptions {
    /**
     * Search subscriptions. Always paginated.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      email: _root_.scala.Option[String] = None,
      publication: _root_.scala.Option[io.flow.splashpage.v0.models.Publication] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "created_at"
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.splashpage.v0.models.Subscription]]

    /**
     * Returns information about a specific subscription.
     */
    def getById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.splashpage.v0.models.Subscription]

    /**
     * Create a new subscription.
     */
    def post(
      subscriptionForm: io.flow.splashpage.v0.models.SubscriptionForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.splashpage.v0.models.Subscription]

    def deleteById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  package errors {

    import io.flow.common.v0.models.json._
    import io.flow.splashpage.v0.models.json._

    case class ErrorsResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val errors = _root_.io.flow.splashpage.v0.Client.parseJson("Seq[io.flow.common.v0.models.Error]", response, _.validate[Seq[io.flow.common.v0.models.Error]])
    }

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

}